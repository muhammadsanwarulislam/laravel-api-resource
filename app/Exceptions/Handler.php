<?php

namespace App\Exceptions;

use App\Helpers\APIHelpers;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Database\QueryException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\JsonResponse;
use Symfony\Component\HttpFoundation\Response;
use Throwable;
use Tymon\JWTAuth\Exceptions\JWTException;
use Tymon\JWTAuth\Exceptions\TokenBlacklistedException;
use Tymon\JWTAuth\Exceptions\TokenExpiredException;
use Tymon\JWTAuth\Exceptions\TokenInvalidException;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        //
    }

    public function report(Throwable $exception)
    {
        return parent::report($exception); // TODO: Change the autogenerated stub
    }

    public function render($request, Throwable $exception)
    {
        if ($exception instanceof QueryException) {
            $code = $exception->getCode();
            $message = $exception->getMessage();
            $response = APIHelpers::createAPIResponse(true, $code, $message, null);
            return new JsonResponse($response, Response::HTTP_UNPROCESSABLE_ENTITY);
        } elseif ($exception instanceof ModelNotFoundException) {
            $code = Response::HTTP_NOT_FOUND;
            $message = $exception->getMessage();
            $response = APIHelpers::createAPIResponse(true, $code, $message, null);
            return new JsonResponse($response, $code);
        } elseif ($exception instanceof TokenInvalidException) {
            $code = Response::HTTP_INTERNAL_SERVER_ERROR;
            $message = $exception->getMessage();
            $response = APIHelpers::createAPIResponse(true, $code, $message, null);
            return new JsonResponse($response, $code);
        } elseif ($exception instanceof TokenBlacklistedException) {
            $code = Response::HTTP_INTERNAL_SERVER_ERROR;
            $message = $exception->getMessage();
            $response = APIHelpers::createAPIResponse(true, $code, $message, null);
            return new JsonResponse($response, $code);
        } elseif ($exception instanceof TokenExpiredException) {
            $code = Response::HTTP_INTERNAL_SERVER_ERROR;
            $message = $exception->getMessage();
            $response = APIHelpers::createAPIResponse(true, $code, $message, null);
            return new JsonResponse($response, $code);
        } elseif ($exception instanceof JWTException) {
            $code = Response::HTTP_INTERNAL_SERVER_ERROR;
            $message = $exception->getMessage();
            $response = APIHelpers::createAPIResponse(true, $code, $message, null);
            return new JsonResponse($response, $code);
        }

        return parent::render($request, $exception);
    }
}
